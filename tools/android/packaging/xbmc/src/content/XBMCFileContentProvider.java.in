package @APP_PACKAGE@.content;

import android.content.ContentValues;
import android.database.Cursor;
import android.database.MatrixCursor;
import android.net.Uri;

import @APP_PACKAGE@.XBMCJsonRPC;
import @APP_PACKAGE@.model.File;

import java.util.ArrayList;
import java.util.List;

public class XBMCFileContentProvider extends XBMCContentProvider
{
  native void _createNativeInstance();
  native void _releaseNativeInstance();
  native ArrayList<File> _getDirectoryContent(String url);

  private static String TAG = "@APP_NAME@_File_Provider";
  public static final String AUTHORITY = AUTHORITY_ROOT + ".file";

  public static Uri buildUri(String surl)
  {
    if (surl == null)
      return null;
    if (surl.isEmpty())
      return null;

    Uri.Builder builder = new Uri.Builder();
    builder.scheme("content")
            .authority(AUTHORITY)
            .fragment(surl);

    Uri out = builder.build();
    // Log.d(TAG, "GetImageUri: in:" + surl + " out:" + out.toString());
    return out;
  }

  @Override
  public int delete(Uri arg0, String arg1, String[] arg2)
  {
    // TODO Auto-generated method stub
    return 0;
  }

  @Override
  public String getType(Uri arg0)
  {
    return "vnd.android.cursor.dir/xbmc_file";
  }

  @Override
  public Uri insert(Uri arg0, ContentValues arg1)
  {
    // TODO Auto-generated method stub
    return null;
  }

  @Override
  public boolean onCreate()
  {
    _createNativeInstance();

    return true;
  }

  @Override
  public int update(Uri arg0, ContentValues arg1, String arg2, String[] arg3)
  {
    // TODO Auto-generated method stub
    return 0;
  }

  @Override
  public Cursor query(Uri uri, String[] projection, String selection,
                      String[] selectionArgs, String sortOrder)
  {
    String xbmcURL = uri.getFragment();

    List<File> files = mJsonRPC.getFiles(xbmcURL);
    if (files.isEmpty())
      return null;

    String[] fileCols = new String[]
            {
                    File.NAME,
                    File.CATEGORY,
                    File.URI,
                    File.ID,
                    File.MEDIATYPE
            };
    MatrixCursor mc = new MatrixCursor(fileCols);

    for (File file : files)
    {
      mc.addRow(new Object[]
              {
                      file.getName(),
                      file.getCategory(),
                      file.getUri(),
                      file.getId(),
                      file.getMediatype()
              });
    }
    return mc;
  }

  @Override
  protected void finalize() throws Throwable
  {
    super.finalize();

    _releaseNativeInstance();
  }
}
