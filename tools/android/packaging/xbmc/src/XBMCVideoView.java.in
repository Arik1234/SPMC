package @APP_PACKAGE@;

import android.content.Context;
import android.graphics.PixelFormat;
import android.opengl.GLSurfaceView;
import android.util.Log;
import android.view.Surface;
import android.view.SurfaceHolder;
import android.widget.RelativeLayout;

import java.util.concurrent.Callable;
import java.util.concurrent.FutureTask;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

public class XBMCVideoView extends GLSurfaceView implements
        SurfaceHolder.Callback
{
  native void _surfaceChanged(SurfaceHolder holder, int format, int width, int height);
  native void _surfaceCreated(SurfaceHolder holder);
  native void _surfaceDestroyed(SurfaceHolder holder);

  private static final String TAG = "XBMCVideoPlayView";

  public boolean mIsCreated = false;
  private RelativeLayout mVideoLayout = null;
  private XBMCVideoRenderer mRenderer;

  public static XBMCVideoView createVideoView()
  {
    FutureTask<XBMCVideoView> futureResult = new FutureTask<XBMCVideoView>(new Callable<XBMCVideoView>()
    {
      @Override
      public XBMCVideoView call() throws Exception
      {
        return new XBMCVideoView(Main.MainActivity);
      }
    });

    try
    {
      Main.MainActivity.runOnUiThread(futureResult);
      XBMCVideoView vw = futureResult.get();
      return vw;
    }
    catch (Exception e)
    {
      e.printStackTrace();
      return null;
    }
  }

  public XBMCVideoView(Context context)
  {
    super(context);
    setZOrderOnTop(true);
    getHolder().addCallback(this);

    mRenderer = new XBMCVideoRenderer();
    setEGLContextClientVersion(2);
    setEGLConfigChooser(8,8,8,8,16,0);

    getHolder().setFormat(PixelFormat.TRANSLUCENT);

    mVideoLayout = (RelativeLayout) Main.MainActivity.findViewById(R.id.VideoLayout);
  }

  public void add()
  {
    Main.MainActivity.runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.MATCH_PARENT);
        mVideoLayout.addView(XBMCVideoView.this, layoutParams);

        setRenderer(mRenderer);
        queueEvent(new Runnable()
                   {
                     // This method will be called on the rendering
                     // thread:
                     public void run()
                     {
                       Log.d(TAG, "_setThreadId: ");
                       mRenderer._setThreadId();
                     }
                   }
        );
      }
    });
  }

  public void release()
  {
    Main.MainActivity.runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        mVideoLayout.removeView(XBMCVideoView.this);
      }
    });
  }

  public Surface getSurface()
  {
    if (!mIsCreated)
    {
      return null;
    }
    else
    {
      Log.d(TAG, "getSurface() = " + getHolder().getSurface());
      return getHolder().getSurface();
    }
  }

  public void setSurfaceRect(final int left, final int top, final int right, final int bottom)
  {
    Main.MainActivity.runOnUiThread(new Runnable()
    {
      @Override
      public void run()
      {
        try
        {
          RelativeLayout.LayoutParams mp = new RelativeLayout.LayoutParams(getLayoutParams());
          mp.setMargins(left, top, mVideoLayout.getWidth() - right, mVideoLayout.getHeight() - bottom);
          setLayoutParams(mp);
          requestLayout();
        }
        catch (Exception e)
        {
          e.printStackTrace();
        }
      }
    });
  }


  @Override
  public void surfaceCreated(SurfaceHolder holder)
  {
    Log.d(TAG, "Created");
    mIsCreated = true;
    onResume();
    _surfaceCreated(holder);
  }

  @Override
  public void surfaceChanged(SurfaceHolder holder, int format, int width,
                             int height)
  {
    if (holder != getHolder())
      return;

    _surfaceChanged(holder, format, width, height);

    Log.d(TAG, "Changed, format:" + format + ", width:" + width
            + ", height:" + height);
  }

  @Override
  public void surfaceDestroyed(SurfaceHolder holder)
  {
    Log.d(TAG, "Destroyed");
    mIsCreated = false;
    onPause();
    _surfaceDestroyed(holder);
  }

  private class XBMCVideoRenderer implements GLSurfaceView.Renderer
  {
    native void _setThreadId();
    native void _onDrawFrame(GL10 gl10);
    native void _onSurfaceCreated(GL10 gl10, EGLConfig eglConfig);
    native void _onSurfaceChanged(GL10 gl10, int w, int h);

    private static final String TAG = "XBMCVideoRenderer";

    @Override
    public void onSurfaceCreated(GL10 gl10, EGLConfig eglConfig)
    {
      Log.d(TAG, "onSurfaceCreated: ");
      _onSurfaceCreated(gl10, eglConfig);
    }

    @Override
    public void onSurfaceChanged(GL10 gl10, int w, int h)
    {
      Log.d(TAG, "onSurfaceChanged: ");
      _onSurfaceChanged(gl10, w, h);
    }

    @Override
    public void onDrawFrame(GL10 gl10)
    {
      Log.d(TAG, "onDrawFrame: ");
      _onDrawFrame(gl10);
    }
  }
}
